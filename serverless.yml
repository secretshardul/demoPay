service: main
app: demopay
org: greedyman

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

plugins:
  - serverless-plugin-include-dependencies
  - serverless-offline
package:
#  include: #include doesn't automatically exclude files
  exclude:
    - ./**
#  individually: true #keep false for faster deployment during dev

functions:
  router: #route API gateway messages
    handler: src/router/handler.main
#    include: src/router/**
    events:
      - http:
          path: / #URL given to textLocal webhook
          method: POST
          integration: lambda-proxy
          #custom Lambda authorizer for 'basic access authentication'.
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  authorizer: #this is a function name
    handler: src/authorizer.handler
    environment:
      SMS_API_SECRET: ${param:SMS_API_SECRET}

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'" #this header tells caller about authentication format
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401' #401 Unauthorized message shown if authentication invalid.
